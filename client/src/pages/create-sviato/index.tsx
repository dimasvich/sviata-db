'use client';

import Button from '@/components/ui/Button';
import Calendar from '@/components/ui/Calendar';
import Input from '@/components/ui/Input';
import Layout from '@/components/ui/Layout';
import Typography from '@/components/ui/Typography';
import Select from '@/components/ui/Select';
import { baseUrl } from '@/http';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { SviatoType } from '@/types';
import Textarea from '@/components/ui/Textarea';
import Head from 'next/head';
import dayjs from 'dayjs';
import localeData from 'dayjs/plugin/localeData';
import { getNthWeekdayOfMonth } from '@/utils';

export default function CreateSviatoPage() {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [date, setDate] = useState('');
  const [type, setType] = useState<string>('');
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [loading, setLoading] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');
  const [id, setId] = useState<string | null>(null);
  const [alternativeDate, setAlternativeDate] = useState(false);
  const options = Object.keys(SviatoType).filter((k) => isNaN(Number(k)));
  const router = useRouter();
  const [dayOfWeek, setDayOfWeek] = useState('');
  const [week, setWeek] = useState('');
  const [month, setMonth] = useState('');

  dayjs.extend(localeData);

  const handleSubmit = async () => {
    const newErrors: { [key: string]: string } = {};
    if (!name) newErrors.title = 'Заповніть назву';
    if (!description) newErrors.description = 'Заповніть опис';
    if (!date) newErrors.date = 'Виберіть дату';
    if (!type) newErrors.type = 'Оберіть тип свята';

    if (Object.keys(newErrors).length) {
      setErrors(newErrors);
      return;
    }

    setLoading(true);
    setErrors({});
    setSuccessMessage('');

    try {
      const res = await fetch(`${baseUrl}/api/crud`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, description, date, type }),
      });

      if (!res.ok) throw new Error('Помилка при створенні свята');
      const data = await res.json();
      setId(data._id);
      setSuccessMessage('Свято успішно створено!');
    } catch (err) {
      setErrors({ submit: (err as Error).message });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!id) return;
    const redirect = async () => {
      try {
        const [imagesRes, rulesRes] = await Promise.all([
          fetch(`${baseUrl}/api/crud/sviato-images/${date}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
          }),
          fetch(`${baseUrl}/api/crud/day-rules/${date}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
          }),
        ]);

        if (!imagesRes.ok || !rulesRes.ok) return;

        const imagesData = await imagesRes.json();
        const rulesData = await rulesRes.json();

        if (!imagesData || imagesData.length === 0) {
          router.replace(`/add-images?id=${id}`);
        } else if (!rulesData || rulesData.length === 0) {
          router.replace(`/add-rules?id=${id}`);
        } else {
          router.replace(`/add-info?id=${id}`);
        }
      } catch (err) {
        console.error('Fetch error:', err);
      }
    };

    redirect();
  }, [id, date, router]);

  useEffect(() => {
    if (dayOfWeek.length && month.length && week.length) {
      const d = getNthWeekdayOfMonth({ dayOfWeek, weekOrder: week, month });
      setDate(d);
    }
  }, [dayOfWeek, month, week]);

  return (
    <>
      <Head>
        <title>Sviato-db | Створити нове свято</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="max-w-4xl mx-auto bg-surface p-6 rounded-lg shadow-md">
          <Typography type="title">Створити нове свято</Typography>

          <div
            className={
              !alternativeDate
                ? 'grid grid-cols-2 gap-6 mt-6'
                : 'flex gap-2 flex-col'
            }
          >
            <Input
              id="title"
              label="Назва свята*"
              value={name}
              onChange={(e) => setName(e.target.value)}
              error={errors.title}
            />

            <div className="flex gap-2 items-end flex-col">
              {!alternativeDate && (
                <Calendar
                  id="date"
                  label="Дата свята*"
                  value={date}
                  onChange={(d) => setDate(d)}
                  error={errors.date}
                />
              )}
              {alternativeDate && (
                <div className="flex gap-1">
                  <Select
                    id="dayOfWeek"
                    value={dayOfWeek}
                    onChange={setDayOfWeek}
                    label="День тижня"
                    options={dayjs.weekdays()}
                    error=""
                  />
                  <Select
                    id="weekOrder"
                    value={week}
                    onChange={setWeek}
                    label="Порядок у місяці"
                    options={['1', '2', '3', '4', '5']}
                    error=""
                  />
                  <Select
                    id="month"
                    value={month}
                    onChange={setMonth}
                    label="Місяць"
                    options={dayjs.months()}
                    error=""
                  />
                </div>
              )}
              {!alternativeDate ? (
                <Button onClick={() => setAlternativeDate(true)} type="default">
                  Немає точної дати?
                </Button>
              ) : (
                <Button
                  onClick={() => setAlternativeDate(false)}
                  type="default"
                >
                  Є точна дата?
                </Button>
              )}
            </div>

            <div className="col-span-2">
              <Textarea
                id="description"
                label="Опис (HTML)*"
                maxLength={1000}
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                error={errors.description}
              />
            </div>
            <Select
              id="type"
              label="Тип свята*"
              value={type}
              onChange={setType}
              options={options}
              error={errors.type}
            />
          </div>

          {errors.submit && (
            <p className="text-red-500 mt-4">{errors.submit}</p>
          )}
          {successMessage && (
            <p className="text-green-600 mt-4">{successMessage}</p>
          )}

          <div className="mt-6 flex gap-4">
            <Button onClick={handleSubmit}>
              {loading ? 'Зберігаємо...' : 'Створити'}
            </Button>
          </div>
        </div>
      </Layout>
    </>
  );
}
